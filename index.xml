<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Saturated Grey</title>
    <link>https://faizalpribadi.github.io/</link>
    <description>Recent content on A Saturated Grey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 10 Aug 2019 01:29:22 +0700</lastBuildDate>
    
	<atom:link href="https://faizalpribadi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency Injection With Golang Wire</title>
      <link>https://faizalpribadi.github.io/blog/dependency-injection-with-golang-wire/</link>
      <pubDate>Sat, 10 Aug 2019 01:29:22 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/dependency-injection-with-golang-wire/</guid>
      <description>Dependency Injection is the idea that your components (usually structs in go or interfaces based on reflection) should receive their dependencies when being created.
Google introduce wire as dependency injection, and used by google-cloud-platform library.
In here, i will explain a simple case, how to use wire as dependency injection.
//repository.go package repository type ( Repository interface { Query() string } Repo struct{} ) func NewRepository() *Repo { return &amp;amp;Repo{} } func (r *Repo) Query() string { return &amp;quot;SELECT * FROM queries&amp;quot; }  //service.</description>
    </item>
    
    <item>
      <title>Websocket in Go With Gorilla Websocket</title>
      <link>https://faizalpribadi.github.io/blog/websocket-in-go-with-gorilla-websocket/</link>
      <pubDate>Sat, 08 Jun 2019 19:58:27 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/websocket-in-go-with-gorilla-websocket/</guid>
      <description>Learn how to use websockets in Golang to create a real time application with an Gorilla Websocket
hub.go
package hub import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;github.com/faizalpribadi/learn/client&amp;quot; &amp;quot;github.com/gorilla/websocket&amp;quot; ) var ( upgrader = websocket.Upgrader{ ReadBufferSize: 1024, WriteBufferSize: 1024, CheckOrigin: func(r *http.Request) bool { return true }, } ) type Hub interface { Serve(chan client.Client) func(http.ResponseWriter, *http.Request) HasClient(userId string) bool GetClient(userId string) (client.Client, bool) Stop() } type hub struct { connections map[string]client.Client upgrader websocket.</description>
    </item>
    
    <item>
      <title>Creational Pattern in Go With Abstract Factory and Factory Method</title>
      <link>https://faizalpribadi.github.io/blog/creational-pattern-in-go-with-abstract-factory-and-factory-method/</link>
      <pubDate>Sat, 08 Jun 2019 02:40:52 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/creational-pattern-in-go-with-abstract-factory-and-factory-method/</guid>
      <description>package main type Reader interface { ReadAll(body []byte) error } type reader struct{} func NewReader() *reader { return &amp;amp;reader{} } func (r *reader) ReadAll(body []byte) error { // Implement function ReadAll return nil } type Writer interface { WriteFile(name string, destination string, data interface{}) error } type writer struct{} func NewWriter() *writer { return &amp;amp;writer{} } func (w *writer) WriteFile(name string, destination string, data interface{}) error { // Implement function WriteFile return nil } type Option struct { reader Reader writer Writer } func NewOption(reader Reader, writer Writer) *Option { return &amp;amp;Option{reader, writer} } func (o *Option) Injector() { // Use ReadAll function from Reader interface o.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://faizalpribadi.github.io/about/</link>
      <pubDate>Fri, 07 Jun 2019 16:38:57 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/about/</guid>
      <description>Hi, i am a Software Engineer and Love Photography :)</description>
    </item>
    
    <item>
      <title>First Cache Mechanism Golang With Redis</title>
      <link>https://faizalpribadi.github.io/blog/first-cache-mechanism-golang-with-redis/</link>
      <pubDate>Fri, 07 Jun 2019 16:25:34 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/first-cache-mechanism-golang-with-redis/</guid>
      <description>package main import ( &amp;quot;database/sql&amp;quot; &amp;quot;github.com/go-redis/redis&amp;quot; _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot; &amp;quot;github.com/gorilla/mux&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;time&amp;quot; &amp;quot;os&amp;quot; ) type DB struct { redis *redis.Client mysql *sql.DB } func NewDB() *DB { opt := &amp;amp;redis.Options{ Addr: os.Getenv(&amp;quot;REDIS_HOST&amp;quot;), Password: &amp;quot;&amp;quot;, DB: 0, } client := redis.NewClient(opt) pong, err := client.Ping().Result() if err != nil { log.Panic(err, pong) } db, err := sql.Open(os.Getenv(&amp;quot;DB_DRIVER&amp;quot;), os.Getenv(&amp;quot;DB_DSN&amp;quot;)) if err != nil { log.Panic(err) } return &amp;amp;DB{redis: client, mysql: db} } func (d *DB) Fetch(w http.</description>
    </item>
    
    <item>
      <title>Resilient Http Request in Go</title>
      <link>https://faizalpribadi.github.io/blog/resilient-http-request-in-go/</link>
      <pubDate>Mon, 03 Jun 2019 03:06:11 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/resilient-http-request-in-go/</guid>
      <description>Resilience mechanism in distributed system reduce oversize request available for users.
in this part, we can make resilient using the circuit breaker pattern using a hystrix-golang library.
breakers.go
package breakers import ( &amp;quot;github.com/afex/hystrix-go/hystrix&amp;quot; ) const ( FetchJson = &amp;quot;fetch.json&amp;quot; ) func ConfigCircuitBreakers() { breakers := make(map[string]hystrix.CommandConfig) breakers[FetchJson] = hystrix.CommandConfig{ Timeout: 1000, MaxConcurrentRequests: 100, ErrorPercentThreshold: 25, } hystrix.Configure(breakers) }  main.go
package main import ( &amp;quot;github.com/afex/hystrix-go/hystrix&amp;quot; &amp;quot;github.com/faizalpribadi/learn/breakers&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { breakers.</description>
    </item>
    
    <item>
      <title>Simple Golang Library for Retry Mechanism</title>
      <link>https://faizalpribadi.github.io/blog/simple-golang-library-for-retry-mechanism/</link>
      <pubDate>Fri, 31 May 2019 00:51:56 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/simple-golang-library-for-retry-mechanism/</guid>
      <description> retry 
description Retry Execution Library For Go
installation go get -u github.com/faizalpribadi/retry
usage retry.Do(5, 5, func() error { resp, err := http.Get(&amp;quot;https://example.io&amp;quot;) if err != nil { log.Println(err) return err } defer resp.Body.Close() return nil })  test go test  </description>
    </item>
    
    <item>
      <title>Say Hi</title>
      <link>https://faizalpribadi.github.io/blog/say-hi/</link>
      <pubDate>Thu, 30 May 2019 23:57:39 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/say-hi/</guid>
      <description>Ok, let&amp;rsquo;s try to say hi!</description>
    </item>
    
    <item>
      <title>Oops, you are offline.</title>
      <link>https://faizalpribadi.github.io/offline/</link>
      <pubDate>Sun, 16 Oct 2016 19:28:41 +0200</pubDate>
      
      <guid>https://faizalpribadi.github.io/offline/</guid>
      <description>You should try to find some internet connection to browse here.</description>
    </item>
    
    <item>
      <title>Page not found.</title>
      <link>https://faizalpribadi.github.io/404/</link>
      <pubDate>Sun, 16 Oct 2016 19:28:41 +0200</pubDate>
      
      <guid>https://faizalpribadi.github.io/404/</guid>
      <description>You should look somewhere else.</description>
    </item>
    
  </channel>
</rss>