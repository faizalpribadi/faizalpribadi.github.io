<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on A Saturated Grey</title>
    <link>https://faizalpribadi.github.io/blog/</link>
    <description>Recent content in Blog on A Saturated Grey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Jun 2019 16:25:34 +0700</lastBuildDate>
    
	<atom:link href="https://faizalpribadi.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Cache Mechanism Golang With Redis</title>
      <link>https://faizalpribadi.github.io/blog/first-cache-mechanism-golang-with-redis/</link>
      <pubDate>Fri, 07 Jun 2019 16:25:34 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/first-cache-mechanism-golang-with-redis/</guid>
      <description>package main import ( &amp;quot;database/sql&amp;quot; &amp;quot;github.com/go-redis/redis&amp;quot; _ &amp;quot;github.com/go-sql-driver/mysql&amp;quot; &amp;quot;github.com/gorilla/mux&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;time&amp;quot; &amp;quot;os&amp;quot; ) type DB struct { redis *redis.Client mysql *sql.DB } func NewDB() *DB { opt := &amp;amp;redis.Options{ Addr: os.Getenv(&amp;quot;REDIS_HOST&amp;quot;), Password: &amp;quot;&amp;quot;, DB: 0, } client := redis.NewClient(opt) pong, err := client.Ping().Result() if err != nil { log.Panic(err, pong) } db, err := sql.Open(os.Getenv(&amp;quot;DB_DRIVER&amp;quot;), os.Getenv(&amp;quot;DB_DSN&amp;quot;)) if err != nil { log.Panic(err) } return &amp;amp;DB{redis: client, mysql: db} } func (d *DB) Fetch(w http.</description>
    </item>
    
    <item>
      <title>Resilient Http Request in Go</title>
      <link>https://faizalpribadi.github.io/blog/resilient-http-request-in-go/</link>
      <pubDate>Mon, 03 Jun 2019 03:06:11 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/resilient-http-request-in-go/</guid>
      <description>Resilience mechanism in distributed system reduce oversize request available for users.
in this part, we can make resilient using the circuit breaker pattern using a hystrix-golang library.
breakers.go
package breakers import ( &amp;quot;github.com/afex/hystrix-go/hystrix&amp;quot; ) const ( FetchJson = &amp;quot;fetch.json&amp;quot; ) func ConfigCircuitBreakers() { breakers := make(map[string]hystrix.CommandConfig) breakers[FetchJson] = hystrix.CommandConfig{ Timeout: 1000, MaxConcurrentRequests: 100, ErrorPercentThreshold: 25, } hystrix.Configure(breakers) }  main.go
package main import ( &amp;quot;github.com/afex/hystrix-go/hystrix&amp;quot; &amp;quot;github.com/faizalpribadi/learn/breakers&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { breakers.</description>
    </item>
    
    <item>
      <title>Simple Golang Library for Retry Mechanism</title>
      <link>https://faizalpribadi.github.io/blog/simple-golang-library-for-retry-mechanism/</link>
      <pubDate>Fri, 31 May 2019 00:51:56 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/simple-golang-library-for-retry-mechanism/</guid>
      <description> retry 
description Retry Execution Library For Go
installation go get -u github.com/faizalpribadi/retry
usage retry.Retry(5, 1, func() error { // do some logic here return nil })  test go test  </description>
    </item>
    
    <item>
      <title>Say Hi</title>
      <link>https://faizalpribadi.github.io/blog/say-hi/</link>
      <pubDate>Thu, 30 May 2019 23:57:39 +0700</pubDate>
      
      <guid>https://faizalpribadi.github.io/blog/say-hi/</guid>
      <description>Ok, let&amp;rsquo;s try to say hi!</description>
    </item>
    
  </channel>
</rss>